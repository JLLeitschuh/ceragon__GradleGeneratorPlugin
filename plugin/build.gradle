/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/custom_plugins.html
 */
plugins {
    id "com.gradle.plugin-publish" version "0.15.0"
}

dependencies {
    implementation 'com.google.protobuf:protobuf-java:3.17.3'
    implementation 'com.github.os72:protoc-jar:3.11.4'
    implementation group: 'com.alibaba', name: 'easyexcel', version: '2.2.10'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'
}

gradlePlugin {
    // Define the plugin
    plugins {
        protoPlugin {
            id = 'io.github.ceragon.proto'
            implementationClass = 'io.github.ceragon.GradleProtoPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/ceragon/GradleGeneratorPlugin'
    vcsUrl = 'https://github.com/ceragon/GradleGeneratorPlugin'

    plugins {
        protoPlugin {
            // id is captured from java-gradle-plugin configuration
            displayName = 'Gradle proto generate plugin'
            description = "generate code from protobuf file"
            tags = ['protobuf']
            version = '1.0'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}



// 生成Java类的HTML API文档
task javadocs(type: Javadoc) {
    // 默认值
    source = sourceSets.main.allJava
    include("**/io/github/ceragon/protobuf/bean/**")
    include("**/io/github/ceragon/util/TemplateUtil.java")
    // 生成文档的目标目录
    destinationDir = new File(buildDir, "docs")
    // 默认值
    classpath = sourceSets.main.compileClasspath
    // 设置发生错误不会导致生成文档失败
    failOnError = false
    options {
        encoding('UTF-8')
    }
}